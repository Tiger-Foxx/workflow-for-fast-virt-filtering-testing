"""
Script d'analyse avanc√©e de performance IDS Suricata
Analyse le d√©bit de traitement des paquets √† partir des logs
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
import json
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

class SuricataAnalyzer:
    def __init__(self, output_dir="resultats_analyse"):
        """
        Initialise l'analyseur Suricata

        Args:
            output_dir (str): Dossier de sortie pour les r√©sultats
        """
        self.output_dir = Path(output_dir)
        self.create_output_structure()

        # Configuration graphique
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
        plt.rcParams['figure.figsize'] = (12, 8)
        plt.rcParams['font.size'] = 12
        plt.rcParams['axes.grid'] = True
        plt.rcParams['grid.alpha'] = 0.3

        # Stockage des donn√©es
        self.data = {}
        self.stats = {}
        self.rapport = {}

    def create_output_structure(self):
        """Cr√©e la structure de dossiers pour les r√©sultats"""
        directories = [
            self.output_dir,
            self.output_dir / "graphiques",
            self.output_dir / "graphiques" / "evolution",
            self.output_dir / "graphiques" / "distribution",
            self.output_dir / "graphiques" / "comparaison",
            self.output_dir / "graphiques" / "statistiques",
            self.output_dir / "rapports"
        ]

        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)

        print(f"üìÅ Structure cr√©√©e dans: {self.output_dir}")

    def load_throughput_data(self, filepath, test_name):
        """
        Charge et traite les donn√©es de d√©bit

        Args:
            filepath (str): Chemin vers le fichier de donn√©es
            test_name (str): Nom du test pour identification

        Returns:
            pd.DataFrame: DataFrame avec les donn√©es trait√©es
        """
        try:
            # Chargement des donn√©es
            df = pd.read_csv(filepath, names=['temps', 'cum_pkts'])

            # Conversion du temps
            df['temps'] = pd.to_datetime(df['temps'], format='%H:%M:%S')

            # Calcul du d√©bit (diff√©rence des cumuls)
            df['debit'] = df['cum_pkts'].diff().fillna(0)

            # Suppression des valeurs n√©gatives (erreurs de mesure)
            df['debit'] = df['debit'].clip(lower=0)

            # Ajout de m√©tadonn√©es
            df['test'] = test_name
            df['seconde'] = range(len(df))

            # Calcul de statistiques
            self.stats[test_name] = {
                'debit_moyen': df['debit'].mean(),
                'debit_median': df['debit'].median(),
                'debit_max': df['debit'].max(),
                'debit_min': df['debit'].min(),
                'ecart_type': df['debit'].std(),
                'cv': df['debit'].std() / df['debit'].mean() * 100 if df['debit'].mean() > 0 else 0,
                'q25': df['debit'].quantile(0.25),
                'q75': df['debit'].quantile(0.75),
                'nombre_mesures': len(df),
                'duree_totale': len(df),
                'paquets_totaux': df['cum_pkts'].iloc[-1] if len(df) > 0 else 0
            }

            return df

        except Exception as e:
            print(f"‚ùå Erreur lors du chargement de {filepath}: {e}")
            return None

    def create_evolution_plots(self):
        """Cr√©e les graphiques d'√©volution du d√©bit"""
        print("üìä Cr√©ation des graphiques d'√©volution...")

        for test_name, df in self.data.items():
            if df is None:
                continue

            fig, axes = plt.subplots(2, 2, figsize=(16, 12))
            fig.suptitle(f'Analyse du d√©bit - Test {test_name} paquets', fontsize=16, fontweight='bold')

            # 1. √âvolution temporelle
            axes[0, 0].plot(df['seconde'], df['debit'], linewidth=2, alpha=0.8)
            axes[0, 0].set_title('√âvolution du d√©bit dans le temps')
            axes[0, 0].set_xlabel('Temps (secondes)')
            axes[0, 0].set_ylabel('D√©bit (paquets/s)')
            axes[0, 0].grid(True, alpha=0.3)

            # 2. Moyenne mobile
            window = max(5, len(df) // 20)
            df['moyenne_mobile'] = df['debit'].rolling(window=window, center=True).mean()
            axes[0, 1].plot(df['seconde'], df['debit'], alpha=0.3, label='D√©bit instantan√©')
            axes[0, 1].plot(df['seconde'], df['moyenne_mobile'], linewidth=3, label=f'Moyenne mobile ({window}s)')
            axes[0, 1].set_title('D√©bit avec moyenne mobile')
            axes[0, 1].set_xlabel('Temps (secondes)')
            axes[0, 1].set_ylabel('D√©bit (paquets/s)')
            axes[0, 1].legend()
            axes[0, 1].grid(True, alpha=0.3)

            # 3. Distribution cumulative
            sorted_debit = np.sort(df['debit'])
            y_vals = np.arange(1, len(sorted_debit) + 1) / len(sorted_debit)
            axes[1, 0].plot(sorted_debit, y_vals, linewidth=2)
            axes[1, 0].set_title('Distribution cumulative')
            axes[1, 0].set_xlabel('D√©bit (paquets/s)')
            axes[1, 0].set_ylabel('Probabilit√© cumulative')
            axes[1, 0].grid(True, alpha=0.3)

            # 4. Boxplot et statistiques
            bp = axes[1, 1].boxplot(df['debit'], patch_artist=True)
            bp['boxes'][0].set_facecolor('lightblue')
            bp['boxes'][0].set_alpha(0.7)
            axes[1, 1].set_title('Distribution (Box Plot)')
            axes[1, 1].set_ylabel('D√©bit (paquets/s)')
            axes[1, 1].grid(True, alpha=0.3)

            plt.tight_layout()
            plt.savefig(self.output_dir / "graphiques" / "evolution" / f"evolution_complete_{test_name}.png",
                       dpi=300, bbox_inches='tight')
            plt.close()

    def create_distribution_plots(self):
        """Cr√©e les graphiques de distribution"""
        print("üìä Cr√©ation des graphiques de distribution...")

        for test_name, df in self.data.items():
            if df is None:
                continue

            fig, axes = plt.subplots(2, 2, figsize=(16, 12))
            fig.suptitle(f'Analyse de distribution - Test {test_name} paquets', fontsize=16, fontweight='bold')

            # 1. Histogramme avec courbe de densit√©
            axes[0, 0].hist(df['debit'], bins=30, alpha=0.7, density=True, edgecolor='black')
            df['debit'].plot.density(ax=axes[0, 0], color='red', linewidth=2)
            axes[0, 0].set_title('Histogramme avec densit√©')
            axes[0, 0].set_xlabel('D√©bit (paquets/s)')
            axes[0, 0].set_ylabel('Densit√©')
            axes[0, 0].grid(True, alpha=0.3)

            # 2. Q-Q plot (normalit√©)
            from scipy import stats
            stats.probplot(df['debit'], dist="norm", plot=axes[0, 1])
            axes[0, 1].set_title('Q-Q Plot (test de normalit√©)')
            axes[0, 1].grid(True, alpha=0.3)

            # 3. Violin plot
            parts = axes[1, 0].violinplot([df['debit']], showmeans=True, showmedians=True)
            axes[1, 0].set_title('Violin Plot')
            axes[1, 0].set_ylabel('D√©bit (paquets/s)')
            axes[1, 0].grid(True, alpha=0.3)

            # 4. Statistiques textuelles
            axes[1, 1].axis('off')
            stats_text = f"""
            Statistiques descriptives:

            Moyenne: {self.stats[test_name]['debit_moyen']:.2f} pkt/s
            M√©diane: {self.stats[test_name]['debit_median']:.2f} pkt/s
            √âcart-type: {self.stats[test_name]['ecart_type']:.2f} pkt/s
            Coefficient de variation: {self.stats[test_name]['cv']:.1f}%

            Min: {self.stats[test_name]['debit_min']:.2f} pkt/s
            Max: {self.stats[test_name]['debit_max']:.2f} pkt/s
            Q25: {self.stats[test_name]['q25']:.2f} pkt/s
            Q75: {self.stats[test_name]['q75']:.2f} pkt/s

            Nombre de mesures: {self.stats[test_name]['nombre_mesures']}
            Dur√©e totale: {self.stats[test_name]['duree_totale']} secondes
            Paquets totaux: {self.stats[test_name]['paquets_totaux']}
            """
            axes[1, 1].text(0.1, 0.9, stats_text, transform=axes[1, 1].transAxes,
                           fontsize=11, verticalalignment='top', fontfamily='monospace')

            plt.tight_layout()
            plt.savefig(self.output_dir / "graphiques" / "distribution" / f"distribution_{test_name}.png",
                       dpi=300, bbox_inches='tight')
            plt.close()

    def create_comparison_plots(self):
        """Cr√©e les graphiques de comparaison entre tests"""
        print("üìä Cr√©ation des graphiques de comparaison...")

        # Pr√©paration des donn√©es pour comparaison
        test_names = list(self.data.keys())
        stats_df = pd.DataFrame(self.stats).T

        # 1. Comparaison des d√©bits moyens
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('Comparaison entre tests', fontsize=16, fontweight='bold')

        # Graphique en barres des moyennes
        axes[0, 0].bar(test_names, stats_df['debit_moyen'], alpha=0.7, color='steelblue')
        axes[0, 0].set_title('D√©bit moyen par test')
        axes[0, 0].set_xlabel('Nombre de paquets envoy√©s')
        axes[0, 0].set_ylabel('D√©bit moyen (pkt/s)')
        axes[0, 0].grid(True, alpha=0.3)

        # Ajout des valeurs sur les barres
        for i, v in enumerate(stats_df['debit_moyen']):
            axes[0, 0].text(i, v + max(stats_df['debit_moyen']) * 0.01, f'{v:.0f}',
                          ha='center', va='bottom', fontweight='bold')

        # 2. Comparaison des √©carts-types
        axes[0, 1].bar(test_names, stats_df['ecart_type'], alpha=0.7, color='orange')
        axes[0, 1].set_title('Variabilit√© (√©cart-type)')
        axes[0, 1].set_xlabel('Nombre de paquets envoy√©s')
        axes[0, 1].set_ylabel('√âcart-type (pkt/s)')
        axes[0, 1].grid(True, alpha=0.3)

        # 3. Box plot comparatif
        debit_data = [df['debit'] for df in self.data.values() if df is not None]
        bp = axes[1, 0].boxplot(debit_data, labels=test_names, patch_artist=True)
        colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightyellow', 'lightpink']
        for patch, color in zip(bp['boxes'], colors[:len(bp['boxes'])]):
            patch.set_facecolor(color)
            patch.set_alpha(0.7)
        axes[1, 0].set_title('Distribution comparative')
        axes[1, 0].set_xlabel('Nombre de paquets envoy√©s')
        axes[1, 0].set_ylabel('D√©bit (pkt/s)')
        axes[1, 0].grid(True, alpha=0.3)

        # 4. Efficacit√© (d√©bit/charge)
        charges = [int(name) for name in test_names]
        efficacite = stats_df['debit_moyen'] / charges * 100
        axes[1, 1].plot(charges, efficacite, marker='o', linewidth=2, markersize=8)
        axes[1, 1].set_title('Efficacit√© de traitement')
        axes[1, 1].set_xlabel('Charge envoy√©e (paquets)')
        axes[1, 1].set_ylabel('Efficacit√© (%)')
        axes[1, 1].grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig(self.output_dir / "graphiques" / "comparaison" / "comparaison_tests.png",
                   dpi=300, bbox_inches='tight')
        plt.close()

        # 5. Graphique de performance (d√©bit vs charge)
        plt.figure(figsize=(12, 8))
        plt.plot(charges, stats_df['debit_moyen'], marker='o', linewidth=3, markersize=10,
                label='D√©bit moyen')
        plt.fill_between(charges,
                        stats_df['debit_moyen'] - stats_df['ecart_type'],
                        stats_df['debit_moyen'] + stats_df['ecart_type'],
                        alpha=0.3, label='¬±1 √©cart-type')
        plt.title('Performance de l\'IDS Suricata', fontsize=16, fontweight='bold')
        plt.xlabel('Charge envoy√©e (paquets)', fontsize=14)
        plt.ylabel('D√©bit trait√© (paquets/s)', fontsize=14)
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(self.output_dir / "graphiques" / "comparaison" / "performance_ids.png",
                   dpi=300, bbox_inches='tight')
        plt.close()

    def create_advanced_statistics(self):
        """Cr√©e des analyses statistiques avanc√©es"""
        print("üìä Cr√©ation des analyses statistiques avanc√©es...")

        # 1. Analyse de corr√©lation temporelle
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('Analyses statistiques avanc√©es', fontsize=16, fontweight='bold')

        # Autocorr√©lation pour le premier test
        first_test = list(self.data.keys())[0]
        df_first = self.data[first_test]

        if df_first is not None and len(df_first) > 10:
            # Calcul de l'autocorr√©lation
            from statsmodels.tsa.stattools import acf
            autocorr = acf(df_first['debit'], nlags=min(40, len(df_first)//4))
            lags = range(len(autocorr))
            axes[0, 0].plot(lags, autocorr, marker='o')
            axes[0, 0].axhline(y=0, color='r', linestyle='--')
            axes[0, 0].set_title(f'Autocorr√©lation - Test {first_test}')
            axes[0, 0].set_xlabel('Lag (secondes)')
            axes[0, 0].set_ylabel('Autocorr√©lation')
            axes[0, 0].grid(True, alpha=0.3)

        # 2. Analyse de stationnarit√©
        test_names = list(self.data.keys())
        stationarity_results = []

        for test_name in test_names:
            df = self.data[test_name]
            if df is not None and len(df) > 10:
                # Test de Dickey-Fuller augment√©
                from statsmodels.tsa.stattools import adfuller
                result = adfuller(df['debit'])
                stationarity_results.append({
                    'test': test_name,
                    'adf_stat': result[0],
                    'p_value': result[1],
                    'stationnaire': result[1] < 0.05
                })

        # Affichage des r√©sultats de stationnarit√©
        axes[0, 1].axis('off')
        stationarity_text = "Test de stationnarit√© (ADF):\n\n"
        for result in stationarity_results:
            status = "‚úì Stationnaire" if result['stationnaire'] else "‚úó Non-stationnaire"
            stationarity_text += f"Test {result['test']}: {status}\n"
            stationarity_text += f"  p-value: {result['p_value']:.4f}\n\n"

        axes[0, 1].text(0.1, 0.9, stationarity_text, transform=axes[0, 1].transAxes,
                       fontsize=11, verticalalignment='top', fontfamily='monospace')

        # 3. Analyse de tendance
        for i, (test_name, df) in enumerate(self.data.items()):
            if df is not None and i < 2:  # Limite √† 2 tests pour la lisibilit√©
                # R√©gression lin√©aire
                x = np.arange(len(df))
                z = np.polyfit(x, df['debit'], 1)
                p = np.poly1d(z)

                ax = axes[1, i]
                ax.plot(x, df['debit'], alpha=0.5, label='Donn√©es')
                ax.plot(x, p(x), "r--", linewidth=2, label=f'Tendance (pente: {z[0]:.3f})')
                ax.set_title(f'Analyse de tendance - Test {test_name}')
                ax.set_xlabel('Temps (secondes)')
                ax.set_ylabel('D√©bit (pkt/s)')
                ax.legend()
                ax.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig(self.output_dir / "graphiques" / "statistiques" / "analyses_avancees.png",
                   dpi=300, bbox_inches='tight')
        plt.close()

    def generate_reports(self):
        """G√©n√®re les rapports texte"""
        print("üìÑ G√©n√©ration des rapports...")
        
        # Conversion des types numpy en types natifs Python pour la s√©rialisation JSON
        stats_serializable = {}
        for test_name, stats in self.stats.items():
            stats_serializable[test_name] = {
                key: float(value) if isinstance(value, (np.integer, np.floating)) else value
                for key, value in stats.items()
            }

        # 1. Rapport de synth√®se
        rapport_synthese = self.output_dir / "rapports" / "rapport_synthese.txt"
        with open(rapport_synthese, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("RAPPORT DE SYNTH√àSE - ANALYSE DE PERFORMANCE IDS SURICATA\n")
            f.write("="*80 + "\n\n")
            f.write(f"Date d'analyse: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")

            f.write("R√âSUM√â EX√âCUTIF\n")
            f.write("-" * 20 + "\n\n")

            if self.stats:
                best_test = max(self.stats.keys(), key=lambda x: self.stats[x]['debit_moyen'])
                f.write(f"‚Ä¢ Meilleure performance: Test {best_test} avec {self.stats[best_test]['debit_moyen']:.2f} pkt/s\n")

                most_stable = min(self.stats.keys(), key=lambda x: self.stats[x]['cv'])
                f.write(f"‚Ä¢ Test le plus stable: Test {most_stable} (CV: {self.stats[most_stable]['cv']:.1f}%)\n\n")

            f.write("D√âTAILS PAR TEST\n")
            f.write("-" * 20 + "\n\n")

            for test_name, stats in self.stats.items():
                f.write(f"Test {test_name} paquets:\n")
                f.write(f"  ‚Ä¢ D√©bit moyen: {stats['debit_moyen']:.2f} pkt/s\n")
                f.write(f"  ‚Ä¢ D√©bit m√©dian: {stats['debit_median']:.2f} pkt/s\n")
                f.write(f"  ‚Ä¢ √âcart-type: {stats['ecart_type']:.2f} pkt/s\n")
                f.write(f"  ‚Ä¢ Coefficient de variation: {stats['cv']:.1f}%\n")
                f.write(f"  ‚Ä¢ Plage: {stats['debit_min']:.2f} - {stats['debit_max']:.2f} pkt/s\n")
                f.write(f"  ‚Ä¢ Dur√©e: {stats['duree_totale']} secondes\n")
                f.write(f"  ‚Ä¢ Paquets totaux trait√©s: {stats['paquets_totaux']}\n\n")

        # 2. Rapport CSV des statistiques
        stats_csv = self.output_dir / "rapports" / "statistiques_detaillees.csv"
        stats_df = pd.DataFrame(self.stats).T
        stats_df.to_csv(stats_csv, index_label='test')

        # 3. Rapport JSON pour int√©gration
        rapport_json = self.output_dir / "rapports" / "donnees_analyse.json"
        with open(rapport_json, 'w', encoding='utf-8') as f:
            json.dump({
                'metadata': {
                    'date_analyse': datetime.now().isoformat(),
                    'version_script': '2.0'
                },
                'statistiques': stats_serializable,  # Utiliser la version convertie
                'fichiers_generes': {
                    'graphiques': [
                        'evolution/', 'distribution/', 'comparaison/', 'statistiques/'
                    ],
                    'rapports': [
                        'rapport_synthese.txt', 'statistiques_detaillees.csv'
                    ]
                }
            }, f, indent=2, ensure_ascii=False)

    def analyze_files(self, files_dict):
        """
        Analyse principale des fichiers

        Args:
            files_dict (dict): Dictionnaire {nom_test: chemin_fichier}
        """
        print("üöÄ D√©marrage de l'analyse Suricata...")

        # Chargement des donn√©es
        for test_name, filepath in files_dict.items():
            if os.path.exists(filepath):
                print(f"üìÅ Chargement: {filepath}")
                self.data[test_name] = self.load_throughput_data(filepath, test_name)
            else:
                print(f"‚ö†Ô∏è  Fichier non trouv√©: {filepath}")
                self.data[test_name] = None

        # V√©rification qu'au moins un fichier a √©t√© charg√©
        if not any(df is not None for df in self.data.values()):
            print("‚ùå Aucun fichier valide trouv√©!")
            return

        # G√©n√©ration des analyses
        self.create_evolution_plots()
        self.create_distribution_plots()
        self.create_comparison_plots()
        self.create_advanced_statistics()
        self.generate_reports()

        print("\n" + "="*60)
        print("‚úÖ ANALYSE TERMIN√âE AVEC SUCC√àS!")
        print("="*60)
        print(f"üìÇ R√©sultats disponibles dans: {self.output_dir}")
        print(f"üìä Graphiques g√©n√©r√©s: {len([f for f in (self.output_dir / 'graphiques').rglob('*.png')])}")
        print(f"üìÑ Rapports g√©n√©r√©s: {len([f for f in (self.output_dir / 'rapports').rglob('*.*')])}")

        # Affichage du r√©sum√© des performances
        if self.stats:
            print("\nüìà R√âSUM√â DES PERFORMANCES:")
            print("-" * 40)
            for test_name, stats in self.stats.items():
                print(f"Test {test_name:>6}: {stats['debit_moyen']:>7.2f} pkt/s (¬±{stats['ecart_type']:.2f})")

def main():
    """Fonction principale"""
    # Configuration des tests
    tests = {
        "1000": "1000.txt",
        "5000": "5000.txt",
        "25000": "25000.txt"
    }

    # Cr√©ation de l'analyseur
    analyzer = SuricataAnalyzer(output_dir="resultats_analyse_suricata")

    # Lancement de l'analyse
    analyzer.analyze_files(tests)

if __name__ == "__main__":
    main()